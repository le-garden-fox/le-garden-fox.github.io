<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Le Garden Fox</title>
    <link>https://le-garden-fox.github.io/</link>
    <description>Recent content on Le Garden Fox</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Aug 2020 23:22:03 -0700</lastBuildDate>
    
	<atom:link href="https://le-garden-fox.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Boot Sequence</title>
      <link>https://le-garden-fox.github.io/engineering/boot-sequence/</link>
      <pubDate>Fri, 14 Aug 2020 23:22:03 -0700</pubDate>
      
      <guid>https://le-garden-fox.github.io/engineering/boot-sequence/</guid>
      <description>Why you should know about this?
Simply put, you should know about the boot process because it introduces you to the fundamental pieces of your computing system. Having a working knowledge of the kernel, the init process, the BIOS and the other underlying process can give you the upper hand in debugging your system.
What are the steps in the boot process?
 Power BIOS MBR GRUB Kernel Init Run-Levels or PBMGKIR or (Please Bring More Green Kellogs In Rice)  Power</description>
    </item>
    
    <item>
      <title>Grocking TCP Network Connections</title>
      <link>https://le-garden-fox.github.io/engineering/tcp-network-path/</link>
      <pubDate>Fri, 10 Jul 2020 23:22:03 -0700</pubDate>
      
      <guid>https://le-garden-fox.github.io/engineering/tcp-network-path/</guid>
      <description>If there were one thing I would stress young software engineers to learn it would be networking. Networking is a foundational function of software programming. When you write a web server, that software is deeply rooted in the topology of the greater network. It&amp;rsquo;s definitely possible to abstract the network away from an engineers day to day work but understanding networking will almost certainly make you a better engineer. I would go so far as to say that all great software engineers at least grock network topologies.</description>
    </item>
    
    <item>
      <title>Unblocked DNS</title>
      <link>https://le-garden-fox.github.io/engineering/unblocked-dns/</link>
      <pubDate>Wed, 01 Jul 2020 23:22:03 -0700</pubDate>
      
      <guid>https://le-garden-fox.github.io/engineering/unblocked-dns/</guid>
      <description>DNS is one of the pillars of networking. Its function is easy but its implementation can be a bit opaque. My goal here is to enlighten you on DNS so that as a mid level or junior engineer you develop a greater comfort with it. Here are the main topics I want to inform you of.
 What DNS does How DNS is structured How to debug issues related to DNS  Basically I want to &amp;ldquo;unblock&amp;rdquo; you.</description>
    </item>
    
    <item>
      <title>Shell Scripting For The Uninitiated</title>
      <link>https://le-garden-fox.github.io/engineering/shell-scripting/</link>
      <pubDate>Tue, 23 Jun 2020 23:22:03 -0700</pubDate>
      
      <guid>https://le-garden-fox.github.io/engineering/shell-scripting/</guid>
      <description>I really appreciate young engineers that are starting their careers. They have a great deal of passion for their work, perhaps because everything is so new. This post is meant to introduce young engineers to the basics of good shell scripts.
I often get asked by young software engineers what I would recommend they focus on or learn. My answer is always two fold, networking and shell scripting. My reasopning comes from experience.</description>
    </item>
    
  </channel>
</rss>